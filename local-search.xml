<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JAVA代理学习</title>
    <link href="/2022/01/27/java%E4%BB%A3%E7%90%86/"/>
    <url>/2022/01/27/java%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="JAVA的三种代理学习"><a href="#JAVA的三种代理学习" class="headerlink" title="JAVA的三种代理学习"></a>JAVA的三种代理学习</h1><h2 id="1-什么是代理"><a href="#1-什么是代理" class="headerlink" title="1 什么是代理"></a>1 什么是代理</h2><p>  代理(Proxy)是一种设计模式,定义：为其他对象提供一个代理以控制对某个对象的访问，即通过代理对象访问目标对象.这样做的好处是:可以在目标对象实现的基础上,增强额外的功能操作,即扩展目标对象的功能。</p><p><img src="https://blog-img-1304606000.cos.ap-beijing.myqcloud.com/img/proxy.png"></p><h2 id="2-JAVA中的三种代理"><a href="#2-JAVA中的三种代理" class="headerlink" title="2  JAVA中的三种代理"></a>2  JAVA中的三种代理</h2><h3 id="2-1-静态代理"><a href="#2-1-静态代理" class="headerlink" title="2.1 静态代理"></a>2.1 静态代理</h3><p>  代理对象与被代理对象需要继承共同父类或实现相同接口，特点是代理类在编译期就已经确定，即编译器就已经存在它的class文件。</p><h4 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h4><ol><li><p>创建一个接口，代理类和被代理类要实现该接口。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Hello</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建被代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Hello</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建代理类，其中保存被代理的对象。希望在执行被代理类方法前后执行一些其他逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServiceProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Hello</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> HelloService helloService;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HelloServiceProxy</span><span class="hljs-params">(HelloService helloService)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.helloService = helloService;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;你好，世界&quot;</span>);<br>        helloService.hello();<br>        System.out.println(<span class="hljs-string">&quot;Saluton mondo&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StaticProxy</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Hello myHello = <span class="hljs-keyword">new</span> HelloServiceProxy(<span class="hljs-keyword">new</span> HelloService());<br>        myHello.hello();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><p><img src="https://blog-img-1304606000.cos.ap-beijing.myqcloud.com/img/image-20211210121726477.png" alt="image-20211210121726477"></p><p>可以看到通过接口调用方法，实际上执行的是代理类的方法，而代理类的方法中又执行了目标类的方法。</p></li></ol><p>  静态代理做到了在不修改目标类的情况下增强了目标类的方法，但是对每一个目标类都要创建相应的代理类，代理类要继承公共父类或实现公共接口，同时还要定义相同的方法，代码量有点多，且存在不少冗余。下面的动态代理就解决了静态代理这些缺点。</p><h3 id="2-2-JDK动态代理"><a href="#2-2-JDK动态代理" class="headerlink" title="2.2 JDK动态代理"></a>2.2 JDK动态代理</h3><p>  动态代理，不需要在编译期就确定代理类，而是在运行期生成代理类字节码文件，加载使用。JDK的动态代理实现要求代理类必须实现某个接口。</p><h4 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h4><ul><li><p><strong>生成代理类方法</strong></p><p>调用java.lang.reflect包下<code>Proxy</code>类的<code>newProxyInstance()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">newProxyInstance</span><span class="hljs-params">(ClassLoader loader,</span></span><br><span class="hljs-params"><span class="hljs-function">                                      Class&lt;?&gt;[] interfaces,</span></span><br><span class="hljs-params"><span class="hljs-function">                                      InvocationHandler h)</span></span><br></code></pre></td></tr></table></figure><p>参数：<code>loader</code>用来加载代理类的类加载器，<code>interfaces</code>代理类实现接口集合，<code>InvocationHandler</code>为reflect包中的接口。</p></li><li><p><strong>InvacationHandler接口</strong></p><p><code>InvocationHandler</code>为reflect包中的接口，需要实现其中<code>invoke</code>方法，在其中可以实现对目标类方法的增强，比如说在方法执行前后添加其他逻辑，调用代理类方法时其实就会调用该方法。</p></li></ul><h4 id="代码实例-1"><a href="#代码实例-1" class="headerlink" title="代码实例"></a>代码实例</h4><p>  Hello接口，HelloService中hello方法改变为带参数返回值为String的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Hello</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello,World!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以下是实现JDK动态代理步骤</p><ol><li><p>定义自己的InvacationHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Object target;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CustomInvocationHandler</span><span class="hljs-params">(Object target)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;DoSome Before&quot;</span>);<br>        Object res = method.invoke(target,args);<br>        System.out.println(<span class="hljs-string">&quot;DoSome After&quot;</span>);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getNewProxy</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(CustomInvocationHandler.class.getClassLoader(),target.getClass().getInterfaces(),<br>                <span class="hljs-keyword">this</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DynamicProxy</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Hello helloService = <span class="hljs-keyword">new</span> HelloService();<br>        CustomInvocationHandler invocationHandler = <span class="hljs-keyword">new</span> CustomInvocationHandler(helloService);<br>        Hello myHello  = (Hello) invocationHandler.getNewProxy();<br>        String hs = myHello.hello(<span class="hljs-string">&quot;xzz&quot;</span>);<br>        System.out.println(hs);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="https://blog-img-1304606000.cos.ap-beijing.myqcloud.com/img/image-20211210170545910.png" alt="image-20211210170545910"></p></li><li><p>总结</p><p>通过上面的代码演示可以大概概述处JDK动态代理的过程，编译器并没有实现代理类，但是实现了InvovationHandler接口，调用Proxy类的静态方法<code>newProxyInstance()</code>方法时，会传入类加载器，以及目标类的接口信息，还有InvocationHandler的实现，之后运行时会生成代理类,对代理类相关方法的调用会转发到InvocationHandler中的<code>invoke</code>方法，在invoke方法中可以加入其他逻辑，其中通过反射调用目标类方法。</p></li></ol><h4 id="原理探究"><a href="#原理探究" class="headerlink" title="原理探究"></a>原理探究</h4><p><a href="https://www.iteye.com/blog/rejoy-1627405">参考博客</a></p><p>  以上介绍了JDK的动态代理，其实现是基于接口的，原理探究中也发现代理类继承了<code>Proxy</code>类，而JAVA不支持多继承，所以也只能代理实现了接口的类，并且也只能代理接口中的方法，这是一个局限。而下面介绍的Cglib代理则是基于继承实现的，可以做到JDK动态代理所作不到的。</p><h3 id="2-3-CGLIB代理"><a href="#2-3-CGLIB代理" class="headerlink" title="2.3 CGLIB代理"></a>2.3 CGLIB代理</h3><p>  cglib（Code Generation Library）是一个第三方代码生成类库，它可以在运行期扩展Java类与实现Java接口，基于它可以实现动态代理。Cglib是基于继承实现，所以不需要代理类必须实现接口，基于asm字节码修改技术，调用方法不用反射。</p><h4 id="代码实例-2"><a href="#代码实例-2" class="headerlink" title="代码实例"></a>代码实例</h4><ol><li><p>添加Cglib依赖，使用Maven</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;cglib&lt;/groupId&gt;<br>    &lt;artifactId&gt;cglib&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">3.3</span><span class="hljs-number">.0</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure></li><li><p>创建目标类，不继承父类，不实现接口。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderDao</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;插入订单&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建类实现Cglib中的MethodInterceptor接口。</p><p>   实现其中intercept方法，通过MethodProxy类中invokeSuper方法可以调用被代理类的方法。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodInterceptor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">intercept</span><span class="hljs-params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;事务开始&quot;</span>);<br>        Object res = methodProxy.invokeSuper(o,objects);<br>        System.out.println(<span class="hljs-string">&quot;事务结束&quot;</span>);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CglibTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//指定代理类字节码输出位置</span><br>        System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY, <span class="hljs-string">&quot;F:\\class&quot;</span>);<br>        Enhancer enhancer = <span class="hljs-keyword">new</span> Enhancer();<br>        <span class="hljs-comment">//指定被代理的类</span><br>        enhancer.setSuperclass(OrderDao.class);<br>        <br>        <span class="hljs-comment">//设置回调，会把对代理类方法调用转发至此，在此对目标类方法做增强。</span><br>        enhancer.setCallback(<span class="hljs-keyword">new</span> CustomInterceptor());<br>        OrderDao orderDao = (OrderDao) enhancer.create();<br>        orderDao.insertOrder();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="https://blog-img-1304606000.cos.ap-beijing.myqcloud.com/img/image-20211210210626946.png" alt="image-20211210210626946"></p></li><li><p>查看磁盘中生成的代理类</p><p>  IDEA 貌似自动装了反编译插件，java bytecode complier,看了之后看不懂。</p></li></ol><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h2><p>  以上就是 Java 中的三种代理，通过代理可以实现很多功能，如Spring中AOP,各种简化开发的注解，具体有待进一步学习。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/01/26/hello-world/"/>
    <url>/2022/01/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
